h1. Clearance

Rails authentication with email & password.

"We have clearance, Clarence.":http://www.youtube.com/v/mNRXJEE3Nz8

h2. Help

* "#thoughtbot":irc://irc.freenode.net/thoughtbot IRC channel on freenode
* "documentation":http://rdoc.info/projects/thoughtbot/clearance
* "mailing list":http://groups.google.com/group/thoughtbot-clearance

h2. Bugs, Patches

Fork away and create a "Github Issue":http://github.com/thoughtbot/clearance/issues.

h2. Installation

Clearance is a Rails engine. It works with versions of Rails greater than 2.3.

Install it as a gem however you like to install gems. Gem Bundler example:

<pre>
gem "clearance"
</pre>

Make sure the development database exists and run the generator:

<pre>
script/generate clearance
</pre>

This:

* inserts Clearance::User into your User model
* inserts Clearance::Authentication into your ApplicationController
* inserts Clearance::Routes.draw(map) into your config.routes.rb
* created a migration that either creates a users table or adds only missing columns
* prints further instructions

h2. Usage

If you want to authenticate users for a controller action, use the authenticate method in a before_filter.

    class WidgetsController < ApplicationController
      before_filter :authenticate

      def index
        @widgets = Widget.all
      end
    end

Subclass and override any Clearance-provided controller as needed:

    class SessionsController < Clearance::SessionsController
      def url_after_create
        new_blog_post_path
      end
    end

Actions that redirect (create, update, and destroy) in Clearance controllers
can be overriden by re-defining url_after_(action) methods as seen above.

h2. Optional Cucumber features

As your app evolves, you want to know that authentication still works. thoughtbot's opinion is that you should test its integration with your app using "Cucumber":http://cukes.info/.

Run the Cucumber generator (if you haven't already) and Clearance's feature generator:

<pre>
script/generate cucumber
script/generate clearance_features
</pre>

All of the files generated should be new with the exception of the features/support/paths.rb file. If you have not modified your paths.rb then you will be okay to replace it with this one. If you need to keep your paths.rb file then add these locations in your paths.rb manually:

<pre>
def path_to(page_name)
  case page_name
   ...
  when /the sign up page/i
   new_user_path
  when /the sign in page/i
   new_session_path
  when /the password reset request page/i
   new_password_path
  ...
end
</pre>

h2. Optional Formtastic views

We have begun standardizing our forms using "Formtastic":http://github.com/justinfrench/formtastic. We highly recommend trying it. It will make your Rails view life more interesting.

Clearance has another generator to generate Formastic views:

<pre>
script/generate clearance_views
</pre>

Its implementation is designed so that other view styles can be generated if the community wants it. However, we haven't needed them so you'll have to write the patch and send it back if you want other styles (such as Haml).

h2. Authors

Clearance was extracted out of "Hoptoad":http://hoptoadapp.com. We merged the authentication code from two of thoughtbot's clients' Rails apps and have since used it each time we need authentication. The following people have improved the library. Thank you!

Dan Croak, Mike Burns, Jason Morrison, Joe Ferris, Eugene Bolshakov, Nick Quaranto, Josh Nichols, Mike Breen, Marcel GÃ¶rner, Bence Nagy, Ben Mabey, Eloy Duran, Tim Pope, Mihai Anca, Mark Cornick, Shay Arnett, Joshua Clayton, Mustafa Ekim, Jon Yurek, Anuj Dutta, and Chad Pytel.

